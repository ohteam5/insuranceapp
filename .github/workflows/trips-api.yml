name: trips API

on:
  push:
    branches: [master]
    paths:
      - 'apis/trips/**'
      - '.github/workflows/trips-api.yml'
  pull_request:
    branches: [ master ]
    paths:
      - 'apis/trips/**'
      - '.github/workflows/trips-api.yml'


jobs:
  test:
    runs-on: ubuntu-latest
    env:
      working-directory: ./apis/trips
      container-registry: ${{ secrets.REGISTRY_URL }}  # set secret with Container Registry URL, example : xyz.azurecr.io 
      image-name: devopsoh/api-trips
      build-number: ${{github.run_number}}

    steps:
      - uses: actions/checkout@v2
      - name: Build docker image
        working-directory: ${{ env.working-directory }}
        run: docker build -t ${{ env.container-registry }}/${{ env.image-name }}:${{ env.build-number }} .
      - uses: actions/setup-go@v2
        with:
          go-version: '1.11.1' # The Go version to download (if necessary) and use.
      - name: Test
        working-directory: ${{env.working-directory}}/tests/
        run: go test
      - name: Create an issue on failure
        if: ${{ failure() }}
        uses: actions/github-script@v3.0.0
        with:
          # The script to run
          script: |
              let body = "${{ env.build_name }} Workflow Failure \n Build Number: ${{ github.run_number }} \n Build Log: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }} \n SHA: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) \n";
              github.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: "${{ env.build_name }} Workflow ${{ github.run_number }} Failed! ",
                body: body
              });      
  build:
    needs: [test]
    runs-on: ubuntu-latest
    env:
      working-directory: ./apis/trips/
      container-registry: ${{ secrets.REGISTRY_URL }}  # set secret with Container Registry URL, example : xyz.azurecr.io 
      registry-username: ${{ secrets.REGISTRY_USERNAME }}
      registry-password: ${{ secrets.REGISTRY_PASSWORD }} 
      image-name: devopsoh/api-trips
      build-number: ${{github.run_number}}
    #if: github.event_name != 'pull_request'

    steps:
      - uses: actions/checkout@v2
      - name: ACR authentication
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.container-registry }}
          username: ${{ env.registry-username }}
          password: ${{ env.registry-password }} 
      - name: Build & Push
        working-directory: ${{ env.working-directory }}
        run: |
          docker build -t ${{ env.container-registry }}/${{ env.image-name }}:${{ env.build-number }} .
          docker push ${{ env.container-registry }}/${{ env.image-name }}:${{ env.build-number }}

  staging:
    needs: [build]
    runs-on: ubuntu-latest
    env:
      app-name: openhackrwy2hdr5trips
      image-name: devopsoh/api-trips
      build-number: ${{ github.run_number }}
    #if: github.event_name != 'pull_request'
    
    steps:
      - uses: actions/checkout@v2
      - name: 'Login via Azure Cli'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - uses: azure/appservice-settings@v1
        with:
          app-name: ${{ env.app-name }}
          slot-name: 'staging'
          app-settings-json: |
            [
              {
                "name": "IMAGE_NAME",
                "value": "${{ env.image-name }}:${{ env.build-number }}",
                "slotSetting": true
              }
            ]
      - uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.app-name }}
          slot-name: 'staging'
          images: '${{ env.container-registry }}/${{ env.image-name }}:${{ env.build-number }}'
      - name: 'Is staging healthy?'
        run: ./apis/test.sh https://openhackrwy2hdr5trips-staging.azurewebsites.net/api/healthcheck/trips
      - name: Create an issue on failure
        if: ${{ failure() }}
        uses: actions/github-script@v3.0.0
        with:
          # The script to run
          script: |
              let body = "${{ env.build_name }} Workflow Failure \n Build Number: ${{ github.run_number }} \n Build Log: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }} \n SHA: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) \n";
              github.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: "${{ env.build_name }} Workflow ${{ github.run_number }} Failed! ",
                body: body
              });   
        
       
